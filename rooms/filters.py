from django import forms
from django.db.models import Prefetch
from django.db.models.expressions import RawSQL
from django_filters import (
    DateFromToRangeFilter,
    FilterSet,
    MultipleChoiceFilter,
)
from rest_framework.exceptions import ValidationError

from all_fixture.choices import RoomCategoryChoices
from calendars.models import CalendarDate
from rooms.models import Room


def annotate_with_prices(queryset, start_date, end_date):
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π –≤ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    total_nights = (end_date - start_date).days

    price_sql = """
        WITH date_series AS (
            SELECT generate_series(%s::date, (%s::date - interval '1 day'), interval '1 day')::date AS day
        ),
        calculations AS (
            SELECT 
                COUNT(DISTINCT CASE 
                    WHEN cd.available_for_booking = TRUE THEN ds.day 
                END) AS nights,
                COALESCE(SUM(cp.price), 0) AS total_price_without_discount,
                COALESCE(
                    SUM(
                        CASE 
                            WHEN cd.discount = TRUE AND cd.discount_amount IS NOT NULL THEN 
                                CASE 
                                    WHEN cd.discount_amount <= 1.0 THEN GREATEST(cp.price * (1 - cd.discount_amount), 0)
                                    ELSE GREATEST(cp.price - cd.discount_amount, 0)
                                END
                            ELSE cp.price
                        END
                    ),
                    0
                ) AS total_price_with_discount
            FROM date_series ds
            JOIN calendars_calendardate cd ON ds.day BETWEEN cd.start_date AND cd.end_date
            JOIN calendars_calendarprice cp ON cp.calendar_date_id = cd.id
            WHERE cp.room_id = rooms_room.id
        )
        SELECT 
            total_price_without_discount AS price_without_discount,
            total_price_with_discount AS price_with_discount,
            nights AS available_count
        FROM calculations
    """

    params = (start_date, end_date)
    queryset = queryset.annotate(
        total_price_without_discount=RawSQL(
            f"SELECT price_without_discount FROM ({price_sql}) AS subquery",
            params,
        ),
        total_price_with_discount=RawSQL(
            f"SELECT price_with_discount FROM ({price_sql}) AS subquery",
            params,
        ),
        nights=RawSQL(
            f"SELECT available_count FROM ({price_sql}) AS subquery",
            params,
        ),
    )
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ–ª–Ω–æ–º—É –ø–æ–∫—Ä—ã—Ç–∏—é
    queryset = queryset.filter(nights=total_nights)
    return queryset


class IntMultiChoiceFilter(MultipleChoiceFilter):
    """
    - value  '00' ‚Ä¶ '10' ‚Üí Swagger –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    - label  —Ç–æ–∂–µ '00' ‚Ä¶ '10' (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å)
    - coerce=int –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∏ `4`, –∏ `04`
    """

    field_class = forms.TypedMultipleChoiceField

    def __init__(self, *args, **kwargs):
        kwargs.setdefault("coerce", int)

        # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ value/label —Å –≤–µ–¥—É—â–∏–º –Ω—É–ª—ë–º
        kwargs["choices"] = [(f"{i:02}", f"{i:02}") for i in range(0, 11)]

        super().__init__(*args, **kwargs)


class RoomFilter(FilterSet):
    date_range = DateFromToRangeFilter(
        method="filter_date_range",
        label="–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç (YYYY-MM-DD)",
    )
    number_of_adults = IntMultiChoiceFilter(
        field_name="number_of_adults",
        label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö",
    )

    number_of_children = IntMultiChoiceFilter(
        field_name="number_of_children",
        label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π",
    )
    category = MultipleChoiceFilter(
        field_name="category",
        choices=RoomCategoryChoices.choices,
        label="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–æ–º–µ—Ä–∞",
    )

    # üëâ –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä: –æ–±—â–µ–µ —á–∏—Å–ª–æ –≥–æ—Å—Ç–µ–π (–≤–∑—Ä–æ—Å–ª—ã–µ + –¥–µ—Ç–∏) : –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ N –≥–æ—Å—Ç–µ–π
    """
        total_guests = NumberFilter(
        method="filter_total_guests",
        label="–í—Å–µ–≥–æ –≥–æ—Å—Ç–µ–π",
    )
    """

    class Meta:
        model = Room
        fields = (
            "date_range",
            "number_of_adults",
            "number_of_children",
            "category",
            # "total_guests", #  üëâ –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ N –≥–æ—Å—Ç–µ–π
        )

    #  üëâ –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ N –≥–æ—Å—Ç–µ–π
    # –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –Ω–µ –∑–∞–±—ã—Ç—å –¥–æ–±–∞–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç—ã django.db.models > F, django_filters > NumberFilter
    '''
        def filter_total_guests(self, queryset, name, value):
        """
        value ‚Äî —ç—Ç–æ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏—à–ª–æ –∏–∑ query-param (?total_guests=3).
        –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–º–µ—Ä–∞, –≥–¥–µ number_of_adults + number_of_children == value
        """
        return (
            queryset
            .annotate(total_guests=F("number_of_adults") + F("number_of_children"))
            .filter(total_guests=value)
        )
    '''

    def filter_date_range(self, queryset, name, value):
        start_date = value.start
        end_date = value.stop
        if start_date and end_date:
            if start_date > end_date:
                raise ValidationError("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é
            queryset = annotate_with_prices(queryset, start_date, end_date)

            # –î–æ–±–∞–≤–ª—è–µ–º prefetch_related –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—Ç
            prefetch_queryset = CalendarDate.objects.filter(
                start_date__lte=end_date,
                end_date__gte=start_date,
                available_for_booking=True,
            )
            queryset = queryset.prefetch_related(Prefetch("calendar_dates", queryset=prefetch_queryset))

            return queryset
        return queryset
